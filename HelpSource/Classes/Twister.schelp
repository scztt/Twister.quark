TITLE:: Twister
summary:: MIDIFighter Twister control class
categories:: External Control
related:: Classes/MIDIClient, Classes/MIDIIn

DESCRIPTION::
A class to process input from a MIDIFighter Twister, and update it's display.

A connected Twister device is separated into two components - a persistant front-end component Twister, which tracks bindings and state
even when the hardware itself is disconnected - and TwisterDevice, which represents the connection between a Twister and an actual hardware controller.
Twister objects can be connected and disconnected to/from different devices, and are designed to operate without a device plugged in.

A Twister has knobs that are accessible in various ways described below. Each knob has a code::.knobCV:: and code::.buttonCV:: property
that can be set to a link::Classes/NumericControlValue:: in order to track it's value and connect it to other things (e.g. UI or synth arguments).
Knobs will be illuminated if their cv's are non-nil. It is helpful to read the documentation of the link::Guides/Connection:: library in order to
understand how to connect and manage control values.

CLASSMETHODS::

METHOD:: new
argument:: device name
Return a Twister device. Devices are unique Singletons per name (following the link::Classes/Pdef:: or link::Classes/Singleton:: pattern).
By default, code::\default:: is connected to a device with the name "Midi Fighter Twister 1", and code::\secondary:: is attached to "Midi Fighter Twister 2".
Note that on Mac, MIDI Fighter devices can be renamed in the Audio and Midi configuration utility to match this naming convention. The names are persistant
so that e.g. one device will always connect as "default".

New devices can be registered using:
code::
TwisterDevice.registerDevice(\myDevice, "Custom Device Name", "Custom Endpoint Name");
::

INSTANCEMETHODS::

METHOD:: knobs
An array of all knobs. Returned objects are link::Classes/TwisterKnob::'s.

METHOD:: rows
argument:: x
argument:: y
Access Twister knobs by row. Returned objects are link::Classes/TwisterKnob::'s.
code::
Twister(\default).rows; // A 2d array of knobs by row
Twister(\default).rows(1); // an array of all items in row 1
Twister(\default).rows(1, 2); // knob at row 1, column 2
::

METHOD:: cols
argument:: y
argument:: x
Access Twister knobs by column. Returned objects are link::Classes/TwisterKnob::'s.
code::
Twister(\default).cols; // A 2d array of knobs by column
Twister(\default).cols(1); // an array of all items in column 1
Twister(\default).cols(1, 2); // knob at column 1, row 2
::

METHOD:: connect
argument:: inDevice
Connect to a TwisterDevice.

METHOD:: disconnect
Disconnect from a TwisterDevice.

METHOD:: free
Destroy free all connections and resources related to this Twister object.

METHOD:: brightness
argument:: val
Set overall brightness of device (0..1);


METHOD:: buttons
An array of controls for the left and right side buttons on the Twister.

EXAMPLES::

code::
(
s.waitForBoot {
	~t = Twister(\default);

	// Set up some control values we want to connect the twister to.
	// See help for Connection library or BusControlValue for more details.
	~c = ControlValueEnvir(BusControlValue);
	~c.use {
		~amp.spec = \db.asSpec;
		~freq.spec = \freq.asSpec;
		~formant.spec = [100, 5000];
		~bw.spec = [10, 200];
		~speak = OnOffControlValue();
	};

	// Map our control values to knobs and buttons
	~t.rows(0, 0).knobCV = ~c.amp;
	~t.rows(0, 1).knobCV = ~c.freq;
	~t.rows(0, 2).knobCV = ~c.formant;
	~t.rows(0, 3).knobCV = ~c.bw;

	~t.buttons[0].cv = ~c.speak;


	// Set some random colors
	~t.rows(0).do(_.ledColor_(Color.rand));

	// Play a simple synth
	Ndef(\tone, {
		|freq = 100, amp = 0, formant = 100, bw = 100, t_trigger|
		var sig;
		sig = Formant.ar(freq, formant, bw, amp.dbamp);
		sig = sig + (WhiteNoise.ar(0.1) * Env.perc().kr(gate:t_trigger));
	}).play;

	// Map our control values to synth params.
	Ndef(\tone).map(
		\amp, 		~c.amp.asMap,
		\freq, 		~c.freq.asMap,
		\formant, 	~c.formant.asMap,
		\bw, 		~c.bw
	);

	// Map our button to something arbitrary
	~c.speak.signal(\on).connectToUnique({
		"Pushing a button".postln;
		Ndef(\tone).set(\t_trigger, 1);
	});

	// Set some initial values.
	// Note that this should update the display on the Twister device if it is connected.
	~c.setValues((
		freq: 370,
		amp: -10,
		formant: 1000,
		bw: 300
	));
};
)

(
// Clean up
Twister(\default).free;
~c.do(_.free);
)

::